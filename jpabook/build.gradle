plugins {
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'
}

group = 'jpabook'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

ext['hibernate.version'] = '5.2.11.Final'
apply plugin: "io.spring.dependency-management"
dependencies {
    implementation('org.springframework:spring-webmvc:5.0.6.RELEASE')
    implementation('org.springframework:spring-orm:5.0.6.RELEASE')
    implementation('org.hibernate:hibernate-entitymanager:5.3.10.Final')
    runtimeOnly 'com.h2database:h2'
    implementation('org.apache.tomcat:tomcat-jdbc:9.0.46')

    runtimeOnly('javax.servlet:jstl:1.2')
    providedCompile('javax.servlet:javax.servlet-api:3.1.0')
    providedCompile('javax.servlet.jsp:javax.servlet.jsp-api:2.3.1')

    implementation('org.slf4j:slf4j-api:1.7.6')
    runtimeOnly('ch.qos.logback:logback-classic:1.2.4')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation ('junit:junit:4.12')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation('com.querydsl:querydsl-core')
    implementation('com.querydsl:querydsl-jpa')
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa") // querydsl JPAAnnotationProcessor 사용 지정

    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}


